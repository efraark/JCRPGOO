from abc import ABC, abstractmethod
import random

# Interface para jogador
class PlayerInterface(ABC):
    @abstractmethod
    def make_guess(self, guess):
        pass

    @abstractmethod
    def get_name(self):
        pass

# Classe base Player que implementa a interface PlayerInterface
class Player(PlayerInterface):
    def __init__(self, name):
        self.name = name
        self.guess = None

    def make_guess(self, guess):
        self.guess = guess

    def get_name(self):
        return self.name

# Interface para o jogo de adivinhação
class GuessingGameInterface(ABC):
    @abstractmethod
    def make_attempt(self, guess):
        pass

    @abstractmethod
    def reset_game(self):
        pass

# Classe GuessingGame que implementa a interface GuessingGameInterface
class GuessingGame(GuessingGameInterface):
    def __init__(self, player, lower_bound=1, upper_bound=100):
        self.player = player
        self.number_to_guess = random.randint(lower_bound, upper_bound)
        self.lower_bound = lower_bound
        self.upper_bound = upper_bound
        self.attempts = 0

    def make_attempt(self, guess):
        self.player.make_guess(guess)
        self.attempts += 1
        
        if self.player.guess < self.number_to_guess:
            return f"Palpite menor que o número gerado."
        elif self.player.guess > self.number_to_guess:
            return f"Palpite maior que o número gerado."
        else:
            return f"Parabéns {self.player.get_name()}! Você adivinhou o número {self.number_to_guess} em {self.attempts} tentativas."

    def reset_game(self):
        self.number_to_guess = random.randint(self.lower_bound, self.upper_bound)
        self.attempts = 0

# Extensão de GuessingGame para incluir um limite de tentativas
class LimitedAttemptsGame(GuessingGame):
    def __init__(self, player, lower_bound=1, upper_bound=100, max_attempts=5):
        super().__init__(player, lower_bound, upper_bound)
        self.max_attempts = max_attempts

    def make_attempt(self, guess):
        if self.attempts >= self.max_attempts:
            return f"{self.player.get_name()}, você atingiu o limite de {self.max_attempts} tentativas!"
        return super().make_attempt(guess)

# Testando a Associação entre Player e GuessingGame
if __name__ == "__main__":
    # Criando um jogador
    player = Player("Rafael")

    # Criando uma instância de GuessingGame com o jogador
    game = GuessingGame(player)

    # Simulando palpites
    print(game.make_attempt(50))  # Exemplo de tentativa
    print(game.make_attempt(75))  # Exemplo de tentativa
    print(game.make_attempt(85))  # Exemplo de tentativa
    print(game.make_attempt(90))  # Exemplo de tentativa

    # Testando a extensão com o jogo de tentativas limitadas
    limited_game = LimitedAttemptsGame(player, max_attempts=3)
    print(limited_game.make_attempt(60))
    print(limited_game.make_attempt(70))
    print(limited_game.make_attempt(80))
    print(limited_game.make_attempt(90))  # Aqui deve atingir o limite de tentativas
