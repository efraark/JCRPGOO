from abc import ABC, abstractmethod

# Interface para gerenciamento de conta
class AccountInterface(ABC):
    @abstractmethod
    def debit(self, amount):
        pass

    @abstractmethod
    def get_balance(self):
        pass

    @abstractmethod
    def display_account(self):
        pass

    @abstractmethod
    def set_bank(self, bank):
        pass

# Classe base para Account com Associação Bilateral
class Account(AccountInterface):
    def __init__(self, name, balance):
        self.name = name
        self.balance = balance if balance >= 0 else 0
        self.bank = None  # Associação com Bank (inicialmente nenhuma)
    
    def set_bank(self, bank):
        self.bank = bank
    
    def debit(self, amount):
        if amount > self.balance:
            print(f"Quantia de débito excedeu o saldo da conta de {self.name}.")
        else:
            self.balance -= amount
            print(f"R${amount} debitados com sucesso de {self.name}.")
    
    def get_balance(self):
        return self.balance
    
    def display_account(self):
        bank_name = self.bank.name if self.bank else "Nenhum banco associado"
        print(f"Nome: {self.name}, Saldo: R${self.balance}, Banco: {bank_name}")

# Classe para Account Premium com desconto adicional (extensão da Associação Bilateral)
class PremiumAccount(Account):
    def __init__(self, name, balance, premium_discount):
        super().__init__(name, balance)
        self.premium_discount = premium_discount

    def apply_discount(self, amount):
        discount_amount = amount * (self.premium_discount / 100)
        print(f"Desconto premium aplicado: R${discount_amount:.2f}")
        return amount - discount_amount

    def debit(self, amount):
        amount_after_discount = self.apply_discount(amount)
        super().debit(amount_after_discount)

# Interface para banco
class BankInterface(ABC):
    @abstractmethod
    def add_account(self, account):
        pass

    @abstractmethod
    def display_all_accounts(self):
        pass

# Classe Bank com Associação Bilateral
class Bank(BankInterface):
    def __init__(self, name):
        self.name = name
        self.accounts = []  # Associação com Account

    def add_account(self, account: Account):
        account.set_bank(self)  # Associação do lado da Account
        self.accounts.append(account)  # Associação do lado do Bank
        print(f"Conta de {account.name} adicionada ao banco {self.name}.")

    def display_all_accounts(self):
        print(f"Contas no banco {self.name}:")
        for account in self.accounts:
            account.display_account()

# Testando a Associação Bilateral entre Bank e Account
if __name__ == "__main__":
    # Criando instâncias de Account e PremiumAccount
    account1 = Account("Rafael Rodrigues", 1000)
    account2 = PremiumAccount("Maria Silva", 1500, 10)

    # Criando uma instância de Bank
    bank = Bank("Banco Central")

    # Associando as contas ao banco bilateralmente
    bank.add_account(account1)
    bank.add_account(account2)

    # Exibindo todas as contas associadas ao banco
    bank.display_all_accounts()

    # Testando operações em uma conta comum
    account1.debit(200)
    account1.display_account()

    # Testando operações em uma conta premium com desconto
    account2.debit(200)
    account2.display_account()
